{"remainingRequest":"/Users/arsalanwyne/Desktop/arsalan/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/arsalanwyne/Desktop/arsalan/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/arsalanwyne/Desktop/arsalan/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/arsalanwyne/Desktop/arsalan/src/components/LandingPage.vue?vue&type=template&id=54f74f74&scoped=true&","dependencies":[{"path":"/Users/arsalanwyne/Desktop/arsalan/src/components/LandingPage.vue","mtime":1645399313154},{"path":"/Users/arsalanwyne/Desktop/arsalan/node_modules/cache-loader/dist/cjs.js","mtime":1645305521072},{"path":"/Users/arsalanwyne/Desktop/arsalan/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1642808025035},{"path":"/Users/arsalanwyne/Desktop/arsalan/node_modules/cache-loader/dist/cjs.js","mtime":1645305521072},{"path":"/Users/arsalanwyne/Desktop/arsalan/node_modules/vue-loader/lib/index.js","mtime":1642808025035}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygiZGl2IiwgWwogICAgX2MoCiAgICAgICJkaXYiLAogICAgICB7IHN0YXRpY0NsYXNzOiAiZC1mbGV4IGp1c3RpZnktY29udGVudC1jZW50ZXIgbWwtMiIgfSwKICAgICAgWwogICAgICAgIF9jKCJiLWF2YXRhciIsIHsKICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2Fyc2FsYW4uanBnIiksIHNpemU6ICIxMHJlbSIgfSwKICAgICAgICB9KSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbS00IiwKICAgICAgICAgICAgc3R5bGU6IHsgZm9udFNpemU6ICIycmVtIiB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiYSIsIFtfdm0uX3YoIkFyc2FsYW4gQmluIE5hamVlYiBXeW5lIildKV0KICAgICAgICApLAogICAgICBdLAogICAgICAxCiAgICApLAogICAgX2MoCiAgICAgICJkaXYiLAogICAgICB7IHN0YXRpY0NsYXNzOiAibS00IiB9LAogICAgICBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYi1jYXJkIiwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImItY2FyZC10ZXh0IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZC1pbmxpbmUtYmxvY2siIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJiLWxpbmsiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkLWlubGluZS1ibG9jayBteC00IiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiYWJuYWplZWJAa25veC5lZHUiIH0sCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygiYi1pY29uLW1haWxib3giLCB7IHN0YXRpY0NsYXNzOiAibXItMiIgfSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJhYm5hamVlYkBrbm94LmVkdSIpLAogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJiLWxpbmsiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkLWlubGluZS1ibG9jayBteC00IiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL2FudzEwIiB9LAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoImItaWNvbi1naXRodWIiLCB7IHN0YXRpY0NsYXNzOiAibXItMiIgfSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJhbncxMCIpLAogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJiLWxpbmsiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkLWlubGluZS1ibG9jayBteC00IiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL2Fyc2FsYW53eW5lLyIgfSwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJiLWljb24tbGlua2VkaW4iLCB7IHN0YXRpY0NsYXNzOiAibXItMiIgfSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJhcnNhbGFud3luZSIpLAogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImItY2FyZCIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibXQtMiIsIGF0dHJzOiB7IHRpdGxlOiAiQWJvdXQgTWUiIH0gfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImItY2FyZC10ZXh0IiwgeyBzdGF0aWNDbGFzczogImQtaW5saW5lLWJsb2NrIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIlRoYW5rIHlvdSBmb3IgdmlzaXRpbmcsIEkgZ3JhZHVhdGVkIGZyb20gS25veCBDb2xsZWdlIHdpdGggYSBkb3VibGUgbWFqb3IgaW4gQ29tcHV0ZXIgU2NpZW5jZSBhbmQgQnVzaW5lc3MgJiBNYW5hZ2VtZW50LiBJIGN1cnJlbnRseSB3b3JrIGFzIGEgU29mdHdhcmUgRW5naW5lZXIgYXQgQ29uZmVyZW5jZSBTY2hlZHVsaW5nIFNvbHV0aW9ucy4gVHdvIHRoaW5ncyBJIGFtIHBhc3Npb25hdGUgYWJvdXQgaXMgY3JlYXRpbmcgbmV3IHJlY2lwZXMgYW5kIHRyYXZlbGxpbmcgdG8gSGF3YWlpICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigi8J+MuiIpXSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICBdLAogICAgICAxCiAgICApLAogICAgX2MoCiAgICAgICJkaXYiLAogICAgICBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJkLWZsZXgganVzdGlmeS1jb250ZW50LWJldHdlZW4gbXgtNCIgfSwgWwogICAgICAgICAgX2MoImgyIiwgeyBzdGF0aWNDbGFzczogImFsaWduLXNlbGYtY2VudGVyIiB9LCBbX3ZtLl92KCJSZXNlYXJjaCIpXSksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJjbGlja2FibGUiIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiYi1pY29uLXBhdGNoLXBsdXMiLCB7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAiYi10b2dnbGUiLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWItdG9nZ2xlLnJlc2VhcmNoIiwKICAgICAgICAgICAgICAgICAgICBtb2RpZmllcnM6IHsgcmVzZWFyY2g6IHRydWUgfSwKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImFsaWduLXNlbGYtY2VudGVyIiwKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJib3JkZXItY29sb3IiOiAicmVkIiB9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsgYW5pbWF0aW9uOiAic3BpbiIsICJmb250LXNjYWxlIjogIjIiIH0sCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgXSksCiAgICAgICAgX2MoCiAgICAgICAgICAiYi1jb2xsYXBzZSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibXQtMiIsIGF0dHJzOiB7IGlkOiAicmVzZWFyY2giIH0gfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImItY2FyZCIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm0tNCIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiYi1jYXJkLXRpdGxlIiwgW192bS5fdigiU291dGggQXNpYW4gQ29tcHV0aW5nIildKSwKICAgICAgICAgICAgICAgIF9jKCJiLWNhcmQtdGV4dCIsIHsgc3RhdGljQ2xhc3M6ICJkLWlubGluZS1ibG9jayIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIk15IGNvLWF1dGhvcmVkIHB1YmxpY2F0aW9uIGZvciBJQ0VSIDIwMjAgaW52ZXN0aWdhdGVzIHRoZSBlbmFjdGVkIGNvbXB1dGluZyBjdXJyaWN1bHVtIGFuZCBpdHMgdmFyaW91cyBzaWRlIGFmZmVjdHMgZm9yIFNvdXRoIEFzaWFuJ3MuIFdlIGdhdGhlcmVkIGFuZCBjb21waWxlZCBkYXRhIHJlbGF0aW5nIHRvIENTLUVEIGFuZCB3aGVyZSB0aGUgY3VycmljdWx1bSBjdXJyZW50bHkgc3RhbmRzIGZvciBjb3VudHJpZXMgdGhhdCBoYXZlIGxpdHRsZSB0byBub25lIHJlcHJlc2VudGF0aW9uIGZyb20gQXNpYSBhcyBhIHdob2xlIGFuZCBtb3JlIHNwZWNpZmljYWxseSBTb3V0aCBBc2lhLiAiCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYi1idXR0b24iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAicHVycGxlIiwKICAgICAgICAgICAgICAgICAgICAgICJib3JkZXItY29sb3IiOiAicHVycGxlIiwKICAgICAgICAgICAgICAgICAgICAgICJiYWNrZ3JvdW5kLWNvbG9yIjogIndoaXRlIiwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICB2YXJpYW50OiAib3V0bGluZS1kYXJrIiwKICAgICAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2RsLmFjbS5vcmcvZG9pLzEwLjExNDUvMzM3Mjc4Mi4zNDA2MjUxIiwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJPcGVuIFBhcGVyIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYi1jYXJkIiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibS00IiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJiLWNhcmQtdGl0bGUiLCBbX3ZtLl92KCJUb1VDSCIpXSksCiAgICAgICAgICAgICAgICBfYygiYi1jYXJkLXRleHQiLCB7IHN0YXRpY0NsYXNzOiAiZC1pbmxpbmUtYmxvY2siIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICJUb1VDSCBpcyBhIGNvbGxhYm9yYXRpdmUgcHJvamVjdCBiZXR3ZWVuIFRleGFzIFN0YXRlIFVuaXZlcnNpdHksIENvbmNvcmRpYSBVbml2ZXJzaXR5IGFuZCBLbm94IENvbGxlZ2UsIHRoaXMgaXMgYW4gTlNGIGZ1bmRlZCBwcm9qZWN0LiBXZSBkZXZlbG9wZWQgbm92ZWwgdGVhY2hpbmcgbWF0ZXJpYWxzIGZvciB1bmRlcmdyYWR1YXRlIHN0dWRlbnRzIG9uIGhvdyB0byBwcm9ncmFtIGFuZCB1c2UgSGV0ZXJvZ2VuZW91cyBDb21wdXRpbmcgU3lzdGVtcy4gV2UgYXJlIHVzaW5nIGEgY29tYmluYXRpb24gb2YgSGV0ZXJvZ2VuZW91cyBzeXN0ZW1zIGZvciBvdXIgbWF0ZXJpYWxzIHN1Y2ggYXMgdGhlIFJhc3BiZXJyeSBQaSBhbmQgbW9iaWxlIHBob25lcyBiYXNlZCBvbiB0aGUgQVJNIGJpZy5MSVRUTEUgYXJjaGl0ZWN0dXJlIGFuZCBzdXBlcmNvbXB1dGluZyBzeXN0ZW1zIHdpdGggTnZpZGlhIGNhcmRzIHRoYXQgc3VwcG9ydCBDVURBIHByb2dyYW1taW5nLiBJIHdhcyBhIHBhcnQgb2YgdGhlIGZpcnN0IHRlYW0gdGhhdCBzZXR1cCB0aGUgcHJvamVjdCBhbmQgc3RhcnRlZCBkZXZlbG9wbWVudCBvbiBjb3Vyc2UgbWF0ZXJpYWxzIHdoaWxlIGF0IEtub3guICIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImItaWNvbi1maWxlLWVhcm1hcmstc3ByZWFkc2hlZXQiLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiYi10b2dnbGUiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtYi10b2dnbGUudENvbGxhcHNlIiwKICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVyczogeyB0Q29sbGFwc2U6IHRydWUgfSwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1iLTIiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBzY2FsZTogIjEuNSIgfSwKICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoImItY29sbGFwc2UiLCB7IGF0dHJzOiB7IGlkOiAidENvbGxhcHNlIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImlmcmFtZSIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB6b29tOiAiMiIgfSwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICIxMDAlIiwKICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogImF1dG8iLAogICAgICAgICAgICAgICAgICAgICAgc3JjOiBfdm0ucHVibGljUGF0aCArICJQb3N0ZXJfUlBJLnBkZiIsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImItY2FyZCIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm0tNCIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiYi1jYXJkLXRpdGxlIiwgW192bS5fdigiRHJhZ29uZmx5IildKSwKICAgICAgICAgICAgICAgIF9jKCJiLWNhcmQtdGV4dCIsIHsgc3RhdGljQ2xhc3M6ICJkLWlubGluZS1ibG9jayIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIkRyYWdvbmZseSBpcyBhIEhpZ2ggUGVyZm9ybWFuY2UgQ29tcHV0ZXIgdG9wb2xvZ3ksIG91ciBwcm9qZWN0IHdhcyBmdW5kZWQgYnkgYW4gTlNGIGdyYW50LiBXb3JraW5nIGFsb25nc2lkZSBvbmUgb3RoZXIgc3R1ZGVudCBhbmQgb3VyIGFkdmlzb3IgUHJvZi4gRGF2aWQgQnVuZGUsIHdlIGRldmVsb3BlZCBhbiBhbGdvcml0aG0gdG8gbWFwIHRhc2tzIG9udG8gYSBkcmFnb25mbHkgc3lzdGVtLiBJIHByZXNlbnRlZCBvdXIgd29yayBhdCB2YXJpb3VzIGNvbmZlcmVuY2VzIGFuZCBhdCB0aGUgMjAxOCBDb25zb3J0aXVtIG9mIENvbXB1dGluZyBTY2llbmNlIENvbGxlZ2VzOiBNaWRXZXN0IENvbmZlcmVuY2Ugd2Ugd2VyZSBhd2FyZGVkIDFzdCBwbGFjZSBmb3Igb3VyIHdvcmsuICIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImItaWNvbi1maWxlLWVhcm1hcmstc3ByZWFkc2hlZXQiLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiYi10b2dnbGUiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtYi10b2dnbGUuZENvbGxhcHNlIiwKICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVyczogeyBkQ29sbGFwc2U6IHRydWUgfSwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1iLTIiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBzY2FsZTogIjEuNSIgfSwKICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoImItY29sbGFwc2UiLCB7IGF0dHJzOiB7IGlkOiAiZENvbGxhcHNlIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImlmcmFtZSIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB6b29tOiAiMiIgfSwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICIxMDAlIiwKICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogImF1dG8iLAogICAgICAgICAgICAgICAgICAgICAgc3JjOiBfdm0ucHVibGljUGF0aCArICJQb3N0ZXJfRHJhZ29uZmx5LnBkZiIsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgXSwKICAgICAgMQogICAgKSwKICAgIF9jKAogICAgICAiZGl2IiwKICAgICAgWwogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIG14LTQiIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIlByb2plY3RzIildKSwKICAgICAgICAgICAgX2MoImItaWNvbi1wYXRjaC1wbHVzIiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImItdG9nZ2xlIiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtYi10b2dnbGUucHJvamVjdHMiLAogICAgICAgICAgICAgICAgICBtb2RpZmllcnM6IHsgcHJvamVjdHM6IHRydWUgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImFsaWduLXNlbGYtY2VudGVyIiwKICAgICAgICAgICAgfSksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYi1jb2xsYXBzZSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibXQtMiIsIGF0dHJzOiB7IGlkOiAicHJvamVjdHMiIH0gfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImItY2FyZCIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm0tNCIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiYi1jYXJkLXRpdGxlIiwgW192bS5fdigiWmluZyAiKV0pLAogICAgICAgICAgICAgICAgX2MoImItY2FyZC10ZXh0IiwgeyBzdGF0aWNDbGFzczogImQtaW5saW5lLWJsb2NrIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiQ3Jvc3MgUGxhdGZvcm0gaU9TIGFuZCBBbmRyb2lkIGFwcGxpY2F0aW9uIG1hZGUgdXNpbmcgUmVhY3QgTmF0aXZlIGFuZCBGaXJlYmFzZS4gVGhpcyB3YXMgbXkgc3RhcnR1cCB2ZW50dXJlIHRoYXQgcHJvdmlkZXMgYSBzb2x1dGlvbiBmb3IgZmluZGluZyBldmVudHMgbmVhciB5b3UgdGhhdCBhcmUgY2F0ZXJlZCB0byB5b3VyIGludGVyZXN0cy4gIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJiLWNhcmQiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtLTQiIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImItY2FyZC10aXRsZSIsIFtfdm0uX3YoIkIuTC5PLkIgIildKSwKICAgICAgICAgICAgICAgIF9jKCJiLWNhcmQtdGV4dCIsIHsgc3RhdGljQ2xhc3M6ICJkLWlubGluZS1ibG9jayIgfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIkFuZHJvaWQgYXBwbGljYXRpb24gbWFkZSB1c2luZyBVbml0eSwgdGVhbSBiYXNlZCBwcm9qZWN0IGZvciBDUyAyOTIuIFdvcmsgd2FzIGRpdmlkZWQgaW50byAzIHNwcmludHMgZWFjaCBhIHdlZWsgbG9uZyBhbmQgb3VyIG92ZXJhbGwgZ29hbCB3YXMgdG8gaW5jb3Jwb3JhdGUgYXdhcmVuZXNzIG9mIGNsaW1hdGUgY2hhbmdlIGludG8gaXQuICIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYi1jYXJkIiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibS00IiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJiLWNhcmQtdGl0bGUiLCBbX3ZtLl92KCJTY3J1YiAiKV0pLAogICAgICAgICAgICAgICAgX2MoImItY2FyZC10ZXh0IiwgeyBzdGF0aWNDbGFzczogImQtaW5saW5lLWJsb2NrIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiQ3Jvc3MgUGxhdGZvcm0gaU9TIGFuZCBBbmRyb2lkIGFwcGxpY2F0aW9uIG1hZGUgdXNpbmcgUmVhY3QgTmF0aXZlIGFuZCBFeHBvIGRldmVsb3BtZW50IHN0YWNrLiBTY3J1YiB0ZWFjaGVzIHlvdSB0aGUgY29ycmVjdCB3YXkgdG8gd2FzaCB5b3VyIGhhbmRzIGFzIHN1Z2dlc3RlZCBieSB0aGUgQ0RDIGFuZCBXSE8uIEFwcCBpcyBhbHNvIGhvc3RlZCBhcyBhIHNuYWNrLiAiCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgXSwKICAgICAgMQogICAgKSwKICAgIF9jKAogICAgICAiZGl2IiwKICAgICAgWwogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIG14LTQiIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIkV4cGVyaWVuY2VzIildKSwKICAgICAgICAgICAgX2MoImItaWNvbi1wYXRjaC1wbHVzIiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImItdG9nZ2xlIiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtYi10b2dnbGUuZXhwZXJpZW5jZXMiLAogICAgICAgICAgICAgICAgICBtb2RpZmllcnM6IHsgZXhwZXJpZW5jZXM6IHRydWUgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImFsaWduLXNlbGYtY2VudGVyIiwKICAgICAgICAgICAgfSksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYi1jb2xsYXBzZSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibXQtMiIsIGF0dHJzOiB7IGlkOiAiZXhwZXJpZW5jZXMiIH0gfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImItY2FyZCIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm0tNCIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiYi1jYXJkLXRpdGxlIiwgW192bS5fdigiUmVsZXZhbnQgRXhwZXJpZW5jZXMiKV0pLAogICAgICAgICAgICAgICAgX2MoImItY2FyZC1ib2R5IiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIlRlYWNoaW5nIEFzc2lzdGFudCBmb3IgNCBjb3Vyc2VzIGluIEphdmE7IE9iamVjdCBPcmllbnRlZCBQcm9ncmFtbWluZywgRGF0YSBTdHJ1Y3R1cmVzIChNYXBzLCBBcnJheXMsIExpbmtlZCBMaXN0cywgVHJlZXMsIFN0YWNrcyksIEFsZ29yaXRobSBEZXNpZ24gJiBBbmFseXNpcyAoQkZTL0RGUywgQSosIFNvcnRpbmcsIEJpbmFyeSBTZWFyY2gpLCBQcm9ncmFtbWluZyBMYW5ndWFnZXMgIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoInwiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBSZXNpZGVudCBBc3Npc3RhbnQgRmViIDIwMTggLSBKdW4gMjAxOSAiKSwKICAgICAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCJ8IildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgQWx1bW5pIEFtYmFzc2Fkb3IgUHJlc2lkZW50IE1hciAyMDE3IC0gSnVuIDIwMjAgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdigifCIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIENvbXB1dGVyIFNjaWVuY2UgVHV0b3IgU2VwdCAyMDE3IC0gSnVuIDIwMjAgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdigifCIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIE9yaWVudGF0aW9uIExlYWRlciBBdWcgMjAxNyAtIFNlcHQgMjAxNyAiKSwKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICBdLAogICAgICAxCiAgICApLAogICAgX2MoCiAgICAgICJkaXYiLAogICAgICB7IHN0YXRpY0NsYXNzOiAibWItNCIgfSwKICAgICAgWwogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIG14LTQiIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIlJlc3VtZSIpXSksCiAgICAgICAgICAgIF9jKCJiLWljb24tcGF0Y2gtcGx1cyIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJiLXRvZ2dsZSIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWItdG9nZ2xlLnJlc3VtZSIsCiAgICAgICAgICAgICAgICAgIG1vZGlmaWVyczogeyByZXN1bWU6IHRydWUgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImFsaWduLXNlbGYtY2VudGVyIiwKICAgICAgICAgICAgfSksCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYi1jb2xsYXBzZSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibXQtMiIsIGF0dHJzOiB7IGlkOiAicmVzdW1lIiB9IH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJiLWNhcmQiLCB7IHN0YXRpY0NsYXNzOiAibS00IiB9LCBbCiAgICAgICAgICAgICAgX2MoImlmcmFtZSIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHpvb206ICIyIiB9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgd2lkdGg6ICIxMDAlIiwKICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiYXV0byIsCiAgICAgICAgICAgICAgICAgIHNyYzogX3ZtLnB1YmxpY1BhdGggKyAiQXJzYWxhbkJpbk5hamVlYl9SZXN1bWUucGRmIiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF0pLAogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICBdLAogICAgICAxCiAgICApLAogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}