{"remainingRequest":"/Users/arsalanwyne/Desktop/arsalan/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/arsalanwyne/Desktop/arsalan/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/arsalanwyne/Desktop/arsalan/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/arsalanwyne/Desktop/arsalan/src/components/LandingPage.vue?vue&type=template&id=54f74f74&scoped=true&","dependencies":[{"path":"/Users/arsalanwyne/Desktop/arsalan/src/components/LandingPage.vue","mtime":1645400531941},{"path":"/Users/arsalanwyne/Desktop/arsalan/node_modules/cache-loader/dist/cjs.js","mtime":1645305521072},{"path":"/Users/arsalanwyne/Desktop/arsalan/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1642808025035},{"path":"/Users/arsalanwyne/Desktop/arsalan/node_modules/cache-loader/dist/cjs.js","mtime":1645305521072},{"path":"/Users/arsalanwyne/Desktop/arsalan/node_modules/vue-loader/lib/index.js","mtime":1642808025035}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}